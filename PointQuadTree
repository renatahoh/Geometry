import java.util.ArrayList;
import java.util.List;

/**
 * Problem Set 2
 *
 * A point quadtree: stores an element at a 2D position,
 * with children at the subdivided quadrants.
 *
 * @author Emiko Rohn and Renata Hoh, Dartmouth CS 10, 23W
 * @author Chris Bailey-Kellogg, Dartmouth CS 10, Spring 2015.
 * @author CBK, Spring 2016, explicit rectangle.
 * @author CBK, Fall 2016, generic with Point2D interface.
 *
 */
public class PointQuadtree<E extends Point2D> {
    private E point;                            // the point anchoring this node
    private int x1, y1;                            // upper-left corner of the region
    private int x2, y2;                            // bottom-right corner of the region
    private PointQuadtree<E> c1, c2, c3, c4;    // children

    /**
     * Initializes a leaf quadtree, holding the point in the rectangle
     *
     * @param point the point that anchors this node
     * @param x1    upper left corner x-coordinate
     * @param x2    bottom right corner y-coordinate
     * @param y1    upper left corner y-coordinate
     * @param y2    bottom right corner y-coordinate
     */
    public PointQuadtree(E point, int x1, int y1, int x2, int y2) {
        this.point = point;
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    // Getters

    public E getPoint() {
        return point;
    }

    public int getX1() {
        return x1;
    }

    public int getY1() {
        return y1;
    }

    public int getX2() {
        return x2;
    }

    public int getY2() {
        return y2;
    }

    /**
     * Returns the child (if any) at the given quadrant, 1-4
     *
     * @param quadrant 1 through 4
     */
    public PointQuadtree<E> getChild(int quadrant) {
        if (quadrant == 1) return c1;
        if (quadrant == 2) return c2;
        if (quadrant == 3) return c3;
        if (quadrant == 4) return c4;
        return null;
    }

    /**
     * Returns whether or not there is a child at the given quadrant, 1-4
     *
     * @param quadrant 1 through 4
     */
    public boolean hasChild(int quadrant) {
        return (quadrant == 1 && c1 != null) || (quadrant == 2 && c2 != null) || (quadrant == 3 && c3 != null) || (quadrant == 4 && c4 != null);
    }

    /**
     * Inserts the point into the tree
     *
     * @param p2 the point we are inserting into the tree
     */
    public void insert(E p2) {
        //If inside quadrant 1
        if (p2.getX() >= point.getX() && p2.getY() <= point.getY()) {
            if (c1 != null) { // insert into child tree
                c1.insert(p2);
            } else { // else initializing child tree
                c1 = new PointQuadtree<E>(p2, (int) point.getX(), y1, x2, (int) point.getY());
            }
            //Quadrant 2
        } else if (p2.getX() <= point.getX() && p2.getY() <= point.getY()) {
            if (c2 != null) { // insert into child tree
                c2.insert(p2);
            } else { // else initializing child tree
                c2 = new PointQuadtree<E>(p2, x1, y1, (int) point.getX(), (int) point.getY());
            }
            //Quadrant 3
        } else if (p2.getX() <= point.getX() && p2.getY() >= point.getY()) {
            if (c3 != null) { // insert into child tree
                c3.insert(p2);
            } else { // else initializing child tree
                c3 = new PointQuadtree<E>(p2, x1, (int) point.getY(), (int) point.getX(), y2);
            }
            //Quadrant 4
        } else if (p2.getX() >= point.getX() && p2.getY() >= point.getY()) {
            if (c4 != null) { // insert into child tree
                c4.insert(p2);
            } else { // else initializing child tree
                c4 = new PointQuadtree<E>(p2, (int) point.getX(), (int) point.getY(), x2, y2);
            }
        }
    }

    /**
     * Finds the number of points in the quadtree (including its descendants)
     */
    public int size() {
        int num = 1; // initial size is 1
        // if it has children, then add the number of children with recursive call
        if (c1 != null) num += c1.size();
        if (c2 != null) num += c2.size();
        if (c3 != null) num += c3.size();
        if (c4 != null) num += c4.size();
        return num;
    }

    /**
     * Builds a list of all the points in the quadtree (including its descendants)
     */
    public List<E> allPoints() {
        List<E> f = new ArrayList<>(); // list with all points
        f.add(point); // add first point
        // if it has children, add them with recursive call (adding all elements of their own f list to the initial f list)
        if (hasChild(1)) f.addAll(c1.allPoints());
        if (hasChild(2)) f.addAll(c2.allPoints());
        if (hasChild(3)) f.addAll(c3.allPoints());
        if (hasChild(4)) f.addAll(c4.allPoints());
        return f;
    }

    /**
     * Uses the quadtree to find all points within the circle
     *
     * @param cx circle center x
     * @param cy circle center y
     * @param cr circle radius
     * @return the points in the circle (and the qt's rectangle)
     */
    public List<E> findInCircle(double cx, double cy, double cr) {
        List<E> inCircle = new ArrayList<E>(); // list of "collisions"
        // if the circle is contained in a certain rectangle
        if (Geometry.circleIntersectsRectangle(cx, cy, cr, x1, y1, x2, y2)) {
            // if a point is contained within the circle
            if (Geometry.pointInCircle(point.getX(), point.getY(), cx, cy, cr)) {
                inCircle.add(point); // add to the list
            }
            // add all its children's points through recursive call
            if (hasChild(1)) inCircle.addAll(c1.findInCircle(cx, cy, cr));
            if (hasChild(2)) inCircle.addAll(c2.findInCircle(cx, cy, cr));
            if (hasChild(3)) inCircle.addAll(c3.findInCircle(cx, cy, cr));
            if (hasChild(4)) inCircle.addAll(c4.findInCircle(cx, cy, cr));
        }
        return inCircle;
    }
}
