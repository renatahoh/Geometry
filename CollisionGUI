import java.awt.*;
import javax.swing.*;
import java.util.List;
import java.util.ArrayList;

/**
 * Problem Set 2
 *
 * Using a quadtree for collision detection
 *
 * @author Emiko Rohn and Renata Hoh, Dartmouth CS 10, 23W
 * @author Chris Bailey-Kellogg, Dartmouth CS 10, Spring 2015
 * @author CBK, Spring 2016, updated for blobs
 * @author CBK, Fall 2016, using generic PointQuadtree
 */
public class CollisionGUI extends DrawingGUI {
    private static final int width=800, height=600;		// size of the universe

    private List<Blob> blobs;						// all the blobs
    private List<Blob> colliders;					// the blobs who collided at this step
    private char blobType = 'b';						// what type of blob to create
    private char collisionHandler = 'c';				// when there's a collision, 'c'olor them, or 'd'estroy them
    private int delay = 100000000;							// timer control


    public CollisionGUI() {
        super("super-collider", width, height);

        blobs = new ArrayList<Blob>();

        // Timer drives the animation.
        startTimer();
    }

    /**
     * Adds an blob of the current blobType at the location
     */
    private void add(int x, int y) {
        if (blobType=='b') {
            blobs.add(new Bouncer(x,y,width,height));
        }
        else if (blobType=='w') {
            blobs.add(new Wanderer(x,y));
        }
        else {
            System.err.println("Unknown blob type "+blobType);
        }
    }

    /**
     * DrawingGUI method, here creating a new blob
     */
    public void handleMousePress(int x, int y) {
        add(x,y);
        repaint();
    }

    /**
     * DrawingGUI method
     */
    public void handleKeyPress(char k) {
        if (k == 'f') { // faster
            if (delay>1) delay /= 2;
            setTimerDelay(delay);
            System.out.println("delay:"+delay);
        }
        else if (k == 's') { // slower
            delay *= 2;
            setTimerDelay(delay);
            System.out.println("delay:"+delay);
        }
        else if (k == 'r') { // add some new blobs at random positions
            for (int i=0; i<10; i++) {
                add((int)(width*Math.random()), (int)(height*Math.random()));
                repaint();
            }
        }
        else if (k == 'c' || k == 'd') { // control how collisions are handled
            collisionHandler = k;
            System.out.println("collision:"+k);
        }
        else if (k == 't') { // running the test we created with blobs
            test();
        }
        else { // set the type for new blobs
            blobType = k;
        }
    }

    /**
     * DrawingGUI method, here drawing all the blobs and then re-drawing the colliders in red
     */
    public void draw(Graphics g) {
        // Ask all the blobs to draw themselves.
        // Ask the colliders to draw themselves in red.
        for(Blob blob : blobs){
            // here, we need to check if the list of colliders is not null, if the blob is contained in colliders,
            // and if the collision mode is indeed to repaint them in red ('c')
            if(colliders != null && colliders.contains(blob) && collisionHandler == 'c') g.setColor(Color.red);
            else g.setColor(Color.black);
            g.fillOval((int) (blob.getX() - blob.getR()), (int) (blob.getY() - blob.getR()), (int) blob.getR(), (int) blob.getR());
        }
    }

    /**
     * Sets colliders to include all blobs in contact with another blob
     */
    private void findColliders() {
        // Create the tree
        // For each blob, see if anybody else collided with it
        PointQuadtree<Blob> tree = new PointQuadtree<Blob>(blobs.get(0), 0, 0, width, height);
        colliders = new ArrayList<Blob>();

        for(Blob blob : blobs){
            // Here we are checking if the blob is the first blob, which in the case we already added to the tree when we created
            // and initialized the tree
            if(blob != blobs.get(0)){
                tree.insert(blob);
            }
            // if there's more than 1 blob in the list of blobs colliding (meaning, if the blob is not colliding only with itself
            // but also with another blob), it gets added to the colliders list
            List<Blob> c = tree.findInCircle(blob.getX(), blob.getY(), blob.getR());
            if(c.size() > 1) colliders.addAll(c);
        }
    }

    /**
     * Hard coding test cases of blobs that aren't wanderers
     * Creates 4 different blobs, two colliding and two far away from each other to demonstrate the code
     */
    public void test(){
        Blob test1 = new Blob(300, 500, 10);
        Blob test2 = new Blob(305, 505, 10);
        blobs.add(test1);
        blobs.add(test2);

        Blob test3 = new Blob(300, 100, 10);
        Blob test4 = new Blob(310, 410, 10);
        blobs.add(test3);
        blobs.add(test4);
    }

    /**
     * DrawingGUI method, here moving all the blobs and checking for collisions
     */
    public void handleTimer() {
        // Ask all the blobs to move themselves.
        for (Blob blob : blobs) {
            blob.step();
        }
        // Check for collisions
        if (blobs.size() > 0) {
            findColliders();
            if (collisionHandler=='d') {
                blobs.removeAll(colliders);
                colliders = null;
            }
        }
        // Now update the drawing
        repaint();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new CollisionGUI();
            }
        });
    }
}
